##################################
## Vedic Bali (Sacrifice) 		##
## Based on Gruesome Festivals  ##
##################################

activity_vedic_sacrifice = {
	is_shown = {
		highest_held_title_tier > tier_barony
		is_landed = yes
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
		}
		# Following a valid faith
		OR = {
			# TODO: Make this dependent on a doctrine instead of tied to specific faiths
			faith = faith:shrautism
			faith = faith:kalikula_shaktism
			faith = faith:trika_shaivism
		}
	}

	can_start_showing_failures_only = {
		is_available_adult = yes
		# Must have at least some peasants who are into the idea.
		any_sub_realm_county = {
			OR = {
				faith = faith:shrautism
				faith = faith:kalikula_shaktism
				faith = faith:trika_shaivism
			}
		}
		# Suitable rank required.
		trigger_if = {
			limit = {
				OR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
			}
			custom_tooltip = {
				text = gf_suitable_rank_valid
				OR = {
					is_independent_ruler = yes
					highest_held_title_tier >= tier_kingdom
				}
			}
		}
		trigger_else = {
			highest_held_title_tier >= tier_duchy
			# Technically, we could make this just mega-stressful, but since you'd have no easy way out, that feels like a newb trap.
			NOT = { has_trait = zealous }
		}
	}

	is_valid = {
		# Generic can-continue check.
		scope:host = {
			is_imprisoned = no
			is_landed = yes
			NOT = { is_incapable = yes }
		}
		# If no one shows up
		trigger_if = {
			limit = {
				is_current_phase_active = yes
			}
			has_attending_activity_guests = yes
		}
	}

	on_invalidated = {
		set_variable = {
			name = gf_gold_recoup_value
			value = {
				value = 0
				# For a base, add the total pot spent.
				add = scope:activity.var:gf_refund_pot
				# Then revise it down a little to account for some costs being irredeemable.
				multiply = 0.75
			}
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes  }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}

		if = {
			limit = {
				scope:host = { is_imprisoned = yes }
			}
			#Host has been imprisoned
			every_attending_character = {
				limit = {
					NOT = { this  = scope:host }
				}
				trigger_event = feast.5005
			}
			scope:host = {
				# Send refund
				send_interface_toast = {
					title = dharma_vedic_sacrifice.0002.blot_invalidation.tt
					left_icon = scope:host
					custom_tooltip = dharma_vedic_sacrifice.0002.blot_invalidation.costs_recouped.tt
					hidden_effect = {
						# Regain *most* of any gold spent.
						add_gold = scope:activity.var:gf_gold_recoup_value
					}
				}
				trigger_event = feast.5004
			}
		}
		# Host becomes unlanded
		else_if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		else = {
			every_attending_character = {
				limit = {
					NOT = { this  = scope:host }
				}
				add_to_list = attendees_not_coming #Saved for tooltip in feast.2002
			}
			activity_host = {
				# For loc.
				save_scope_as = blotter
				# Send refund
				send_interface_toast = {
					title = dharma_vedic_sacrifice.0002.blot_invalidation.tt
					left_icon = scope:host
					custom_tooltip = dharma_vedic_sacrifice.0002.blot_invalidation.costs_recouped.tt
					hidden_effect = {
						# Regain *most* of any gold spent.
						add_gold = scope:activity.var:gf_gold_recoup_value
					}
				}
				trigger_event = activity_system.0100
			}
		}
	}

	on_host_death = {
		every_attending_character = {
			limit = { is_alive = yes }
			trigger_event = {
				id = feast.5003
				days = 2 # So you don't get spammed
			}
		}
	}

	province_filter = domain
	ai_province_filter = domain

	max_province_icons = 5

	is_location_valid = {
		OR = {
			faith = faith:shrautism
			faith = faith:kalikula_shaktism
			faith = faith:trika_shaivism
		}
	}

	ui_predicted_cost = {
		gold = {
			value = 0
			add = { # Blot Size
				value = 0
				add = medium_gold_value # Small Blot
				add = major_gold_value # Mid-sized Blot
				add = massive_gold_value # Large Blot
				# Divide by 3 to get the average option cost
				divide = 3
			}
			add = { # Sacrifices Option
				value = 0
				# Goats are free
				add = medium_gold_value # Water Buffalo
				add = major_gold_value # Horses
				# Divide by 3 to get the average option cost
				divide = 3
			}

			# Make it a multiple of 5 (rounded up)
			divide = 5
			ceiling = yes
			multiply = 5
		}
	}

	cooldown = { years = 10 }

	is_grand_activity = no

	is_single_location = yes

	###################
	# AI VALUES
	###################
	ai_will_do = {
		value = 100

		# Different Faith Block
		## If not of the faith, you don't want to do it at all outside of extenuating circumstances.
		if = {
			limit = {
				NOR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
			}
			add = -100
		}
		## No need to account for zealots, as they cannae take the decision.
		## Cynical.
		if = {
			limit = {
				NOT = {
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}
				has_trait = sadistic
			}
			add = 10
		}
		## Otherwise, we only want to do it if basically the whole realm is of some kind of gf-practicing faith.
		if = {
			limit = {
				NOT = {
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}
				any_sub_realm_county = {
					percent >= 0.75
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}
			}
			add = 25
		}
		# Same Faith Block
		# Zealous.
		if = {
			limit = {
				OR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
				has_trait = zealous
			}
			add = 100
		}
		# Cynical.
		if = {
			limit = {
				OR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
				has_trait = cynical
			}
			add = -25
		}
		# You're richer.
		if = {
			limit = {
				OR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
				short_term_gold >= massive_gold_value
			}
			add = 50
		}
		if = {
			limit = {
				OR = {
					faith = faith:shrautism
					faith = faith:kalikula_shaktism
					faith = faith:trika_shaivism
				}
				short_term_gold >= monumental_gold_value
			}
			add = 50
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 10
		if = {
			limit = {
				this = scope:host.capital_province
			}
			add = {
				value = 30
				desc = "Capital Province preferred"
			}
		}
	}

	###################
	# OPTIONS
	###################

	options = {
		vedic_sacrifice_option_size = {
			vedic_sacrifice_size_small = {
				default = yes
				cost = {
					gold = {
						add = {
							value = 0
							add = {
								value = medium_gold_value
								desc = vedic_sacrifice_size_small
							}
						}
					}
				}

				on_start = {
					change_variable = {
						name = gf_refund_pot
						add = scope:host.medium_gold_value
					}
				}

				ai_will_do = {
					value = 10
					add = {
						value = 40
						desc = "Base test value"
					}
				}
			}
			vedic_sacrifice_size_medium = {
				is_valid = {
					custom_tooltip = {
						text = gf_medium_option_valid
						any_held_title = {
							count >= 2
							tier = tier_county
							#faith = scope:gf_faith
						}
					}
				}
				cost = {
					gold = {
						add = {
							value = 0
							add = {
								value = major_gold_value
								desc = vedic_sacrifice_size_medium
							}
						}
					}
				}

				on_start = {
					change_variable = {
						name = gf_refund_pot
						add = scope:host.major_gold_value
					}
				}

				ai_will_do = {
					value = 20
					if = {
						limit = { has_trait = greedy }
						subtract = {
							value = 20
							desc = "Greedy"
						}
					}
				}
			}
			vedic_sacrifice_size_large = {
				is_valid = {
					highest_held_title_tier >= tier_duchy
				}
				cost = {
					gold = {
						add = {
							value = 0
							add = {
								value = massive_gold_value
								desc = vedic_sacrifice_size_large
							}
						}
					}
				}

				on_start = {
					change_variable = {
						name = gf_refund_pot
						add = scope:host.massive_gold_value
					}
				}

				ai_will_do = {
					value = 30
					if = {
						limit = { has_trait = greedy }
						subtract = {
							value = 30
							desc = "Greedy"
						}
					}
				}
			}
		}

		vedic_sacrifice_option_sacrifice = {
			vedic_sacrifice_option_goats = {
				default = yes
				is_shown = {
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}

				on_start = {
					scope:host = {
						set_variable = {
							name = gf_piety_value
							value = minor_piety_gain
						}
						set_variable = {
							name = gf_prestige_value
							value = minor_prestige_gain
						}
					}
				}

				ai_will_do = {
					value = 10
					add = {
						value = 40
						desc = "Base test value"
					}
				}
			}
			vedic_sacrifice_option_water_buffalo = {
				is_shown = {
					OR = {
						is_ai = no
						short_term_gold >= medium_gold_value
					}
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}
				cost = {
					gold = {
						add = {
							value = 0
							add = {
								value = medium_gold_value
								desc = vedic_sacrifice_option_water_buffalo
							}
						}
					}
				}

				on_start = {
					change_variable = {
						name = gf_refund_pot
						add = scope:host.medium_gold_value
					}
					scope:host = {
						set_variable = {
							name = gf_piety_value
							value = medium_piety_gain
						}
					}
					scope:host = {
						set_variable = {
							name = gf_prestige_value
							value = medium_prestige_gain
						}
					}
				}

				ai_will_do = {
					value = 20
					if = {
						limit = { has_trait = greedy }
						subtract = {
							value = 20
							desc = "Greedy"
						}
					}
				}
			}
			vedic_sacrifice_option_horses = {
				is_shown = {
					OR = {
						is_ai = no
						short_term_gold >= major_gold_value
					}
					OR = {
						faith = faith:shrautism
						faith = faith:kalikula_shaktism
						faith = faith:trika_shaivism
					}
				}
				cost = {
					gold = {
						add = {
							value = 0
							add = {
								value = major_gold_value
								desc = vedic_sacrifice_option_horses
							}
						}
					}
				}

				on_start = {
					change_variable = {
						name = gf_refund_pot
						add = scope:host.major_gold_value
					}
					scope:host = {
						set_variable = {
							name = gf_piety_value
							value = major_piety_gain
						}
					}
					scope:host = {
						set_variable = {
							name = gf_prestige_value
							value = major_prestige_gain
						}
					}
				}

				ai_will_do = {
					value = 40
					if = {
						limit = { has_trait = greedy }
						subtract = {
							value = 40
							desc = "Greedy"
						}
					}
				}
			}
		}
	}

	###################
	# PHASES
	###################

	phases = {
		vedic_sacrifice_phase = {
			is_predefined = yes
			order = 1

			on_phase_active = {
				if = {
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { weeks = 1 } }
					save_scope_as = blotter
					scope:activity.var:gf_faith = { save_scope_as = gf_faith }
					trigger_event = dharma_vedic_sacrifice.0003
				}
			}
		}
	}

	max_guest_arrival_delay_time = { months = 8 }

	###################
	# GUEST HANDLING
	###################

	max_guests = 50

	guest_invite_rules = {
		defaults = {
			1 = activity_invite_rule_courtiers
			1 = activity_invite_rule_vassals
			2 = activity_invite_rule_guests

			# MP
			6 = activity_invite_mp
		}
	}

	can_be_activity_guest = {
		is_adult = yes
		in_diplomatic_range = scope:host
	}

	host_intents = {
		intents = { reduce_stress_intent }
		default = reduce_stress_intent
	}

	guest_intents = {
		intents = { reduce_stress_intent }
		default = reduce_stress_intent
	}

	guest_join_chance = {
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################

	pulse_actions = {
		entries = {
			sacrifed_small_animal mournful_music spouse_gives_hook hook_trusting_guest guest_brawl host_gains_diplo_xp host_gains_steward_xp host_gains_intrigue_xp good_kitty good_puppy antiquarian_admires_artifact apa_executioner
		}
		chance_of_no_event = 5
	}

	on_start = {
		set_variable = {
			name = gf_faith
			value = activity_location.faith
		}
		set_variable = {
			name = gf_refund_pot
			value = 0
		}

		# Turn activity options into scopes so all the events work
		# scope:blot_scale
		if = {
			limit = {
				has_activity_option = {
					category = vedic_sacrifice_option_size
					option = vedic_sacrifice_size_small
				}
			}
			set_variable = {
				name = blot_scale
				value = flag:small
			}
		}
		else_if = {
			limit = {
				has_activity_option = {
					category = vedic_sacrifice_option_size
					option = vedic_sacrifice_size_medium
				}
			}
			set_variable = {
				name = blot_scale
				value = flag:medium
			}
		}
		else_if = {
			limit = {
				has_activity_option = {
					category = vedic_sacrifice_option_size
					option = vedic_sacrifice_size_large
				}
			}
			set_variable = {
				name = blot_scale
				value = flag:large
			}
		}

		#var:blot_sacrifice
		if = {
			limit = {
				OR = {
					has_activity_option = {
						category = vedic_sacrifice_option_sacrifice
						option = vedic_sacrifice_option_goats
					}
				}
			}
			set_variable = {
				name = blot_sacrifice
				value = flag:animals_regular
			}
		}
		else_if = {
			limit = {
				OR = {
					has_activity_option = {
						category = vedic_sacrifice_option_sacrifice
						option = vedic_sacrifice_option_water_buffalo
					}
				}
			}
			set_variable = {
				name = blot_sacrifice
				value = flag:animals_grand
			}
		}
		else_if = {
			limit = {
				OR = {
					has_activity_option = {
						category = vedic_sacrifice_option_sacrifice
						option = vedic_sacrifice_option_horses
					}
				}
			}
			set_variable = {
				name = blot_sacrifice
				value = flag:animals_magnificent
			}
		}
	}

	on_enter_travel_state = {
		if = {
			limit = {
				NOT = { this = scope:host }
				current_travel_plan.travel_plan_owner = this
			}
			# saving the scope again so that it gets passed onto the following event
			scope:activity.var:gf_faith = {
				save_scope_as = gf_faith
			}
			scope:host = { save_scope_as = blotter }
			trigger_event = dharma_vedic_sacrifice.0011
		}
	}

	# Entourage Selection

	travel_entourage_selection = {
		weight = {
			value = standard_travel_entourage_additions
			if = {
				limit = {
					has_trait = zealous
				}
				add = 10
			}
		}
		max = 3
		invite_rule_order = 1
	}

	### Graphics
	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_feast_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_feast_01_entity"
	}

	map_entity = "building_western_feast_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	# End Travel
	background = {
		texture = "gfx/interface/illustrations/activity_backgrounds/activity_gruesome_festival.dds"
		environment = "environment_event_bp1_bonfire"
		ambience = "event:/SFX/Events/Backgrounds/burning_building"
	}

	window_characters = {

		guest = {
			camera = camera_body

			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = zealous }
					}
					animation = personality_zealous
				}
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = cynical }
					}
					animation = { boredom personality_cynical }
				}
				#Fallback
				animation = personality_compassionate
			}
		}

		guest = {
			camera = camera_body

			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = zealous }
					}
					animation = personality_zealous
				}
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = cynical }
					}
					animation = { boredom personality_cynical }
				}
				#Fallback
				animation = personality_compassionate
			}
		}

		host = {
			camera = camera_body

			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = idle
		}

		travel_host = {
			camera = camera_body

			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character.location = { is_sea_province = yes }
					}
					animation = { idle }
				}
				triggered_animation = {
					trigger = { scope:character = { has_trait = impatient } }
					animation = { jockey_gallop }
				}
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body

			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = zealous }
					}
					animation = personality_zealous
				}
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = cynical }
					}
					animation = { boredom personality_cynical }
				}
				#Fallback
				animation = personality_compassionate
			}
		}

		guest = {
			camera = camera_body

			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = zealous }
					}
					animation = personality_zealous
				}
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = cynical }
					}
					animation = { boredom personality_cynical }
				}
				#Fallback
				animation = personality_compassionate
			}
		}
	}
}
