
rivalry_war_cb = {
	group = raid
	ai_only_against_neighbors = yes

	allowed_for_character = {
		NOT = { has_government = chinese_government }
	}

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			OR = {
				has_relation_rival = scope:attacker
				has_relation_nemesis = scope:attacker
			}
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = medium_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Piety Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			if = {
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	should_invalidate = {
	}

	on_invalidated_desc = {
	}

	on_invalidated = {
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = rivalry_war_cb_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = massive_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = monumental_prestige_gain }
			}
		}
		scope:defender = {

			pay_short_term_gold = {
				gold = 3
				target = scope:attacker
				yearly_income = yes
			}

			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = massive_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = monumental_prestige_loss }
			}

			capital_county = {
				add_county_modifier = {	#Prevent the county from being sacked again, by anyone, for quite a while.
					modifier = recently_sacked_modifier
					years = 20
				}
				change_county_control = -10
				change_development_progress = major_development_progress_loss	#Always deduct progress.
				if = {	#If they don't have enough progress made, burn a level of development.
					limit = { development_towards_level_increase < major_development_progress_gain }
					change_development_level = -1
				}
			}
		}
		scope:attacker = {
			hidden_effect = {
				scope:defender = {
					every_courtier_or_guest = { add_to_list = potential_captives_list }
					random_in_list = {	#Nab someone related to the defender, preferring tangentials.
						list = potential_captives_list
						limit = {
							OR = {
								AND = {
									has_dynasty = yes
									dynasty = scope:defender.dynasty
								}
								is_consort_of = scope:defender
							}
						}
						alternative_limit = { always = yes }
						weight = {
							base = 1
							modifier = {
								add = 25
								NOT = { is_close_family_of = scope:defender }
							}
							modifier = {
								add = 15
								NOT = { is_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					random_in_list = {	#Always try to grab a second person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					random_in_list = {	#Always try to grab a third person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					if = {	#If at least duchy-tier, try to grab a fourth person.
						limit = { primary_title.tier >= tier_duchy }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
					if = {	#If at least kingdom-tier, try to grab a fifth person.
						limit = { primary_title.tier >= tier_kingdom }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
				}
			}

			capital_county = {
				change_development_progress = medium_development_progress_gain
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = rivalry_war_cb_white_peace_desc_defender
			}
			desc = rivalry_war_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		desc = rivalry_war_cb_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = massive_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = monumental_prestige_loss }
			}
		}

		# Prestige for Defender
		scope:defender = {
			if = {
				limit = { primary_title.tier = tier_county }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_duchy }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_kingdom }
				add_prestige = { value = massive_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_empire }
				add_prestige = { value = monumental_prestige_gain }
			}

		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "RIVALRY_WAR_CB_NAME"
	war_name_base = "RIVALRY_WAR_WAR_NAME_BASE"
	cb_name = "RIVALRY_WAR_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500

	ai_score_mult = {
		value = 1
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
	}
}

# Like rivalry but less severe
raid_war_cb = {
	group = raid
	ai_only_against_neighbors = yes

	allowed_for_character = {
		NOT = { has_government = chinese_government }
	}

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			NOR = {
				has_relation_rival = scope:attacker
				has_relation_nemesis = scope:attacker
			}
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = medium_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Piety Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			if = {
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	should_invalidate = {
	}

	on_invalidated_desc = {
	}

	on_invalidated = {
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = raid_war_cb_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}
		scope:defender = {

			pay_short_term_gold = {
				gold = 3
				target = scope:attacker
				yearly_income = yes
			}

			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}

			capital_county = {
				add_county_modifier = {	#Prevent the county from being sacked again, by anyone, for quite a while.
					modifier = recently_sacked_modifier
					years = 20
				}
				if = {	#If they have enough progress gain to take the hit, then they just lose some progress.
					limit = {
						development_towards_level_increase > medium_development_progress_loss
					}
					change_development_progress = medium_development_progress_loss
				}
				else = {	#If they don't, then they lose the progress, and a level of development is burned away.
					change_development_progress = medium_development_progress_loss
					change_development_level = -1
				}
			}
		}
		scope:attacker = {
			hidden_effect = {
				scope:defender = {
					every_courtier_or_guest = { add_to_list = potential_captives_list }
					random_in_list = {	#Nab someone related to the defender, preferring tangentials.
						list = potential_captives_list
						limit = {
							OR = {
								AND = {
									has_dynasty = yes
									dynasty = scope:defender.dynasty
								}
								is_consort_of = scope:defender
							}
						}
						alternative_limit = { always = yes }
						weight = {
							base = 1
							modifier = {
								add = 25
								NOT = { is_close_family_of = scope:defender }
							}
							modifier = {
								add = 15
								NOT = { is_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					random_in_list = {	#Always try to grab a second person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					random_in_list = {	#Always try to grab a third person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
					}
					if = {	#If at least duchy-tier, try to grab a fourth person.
						limit = { primary_title.tier >= tier_duchy }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
					if = {	#If at least kingdom-tier, try to grab a fifth person.
						limit = { primary_title.tier >= tier_kingdom }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
				}
			}

			capital_county = {
				change_development_progress = medium_development_progress_gain
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = medium_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = medium_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = raid_war_cb_white_peace_desc_defender
			}
			desc = raid_war_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		desc = raid_war_cb_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}

		# Prestige for Defender
		scope:defender = {
			if = {
				limit = { primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "RAID_WAR_CB_NAME"
	war_name_base = "RAID_WAR_WAR_NAME_BASE"
	cb_name = "RAID_WAR_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500

	ai_score_mult = {
		value = 1
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
	}
}

unsettle_tribe_faction_war = {
	group = civil_war
	allowed_for_character = {
		scope:attacker = {
			is_ai = no
		}
	}

	allowed_against_character = {
		scope:attacker = {
			liege = scope:defender
		}
	}

	cost = {
		piety = {
			value = 0
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
		}
		prestige = {
			value = 0
			add = {
				value = 500
				desc = CB_BASE_COST
			}
			if = {
				limit = {
					scope:attacker = {
						has_government = tribal_government
					}
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Culture
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_cultural_parameter = cheaper_cbs
						}
					}
				}
				multiply = {
					value = 0.8
					desc = "CB_ATTACKER_CULTURE"
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Desc for only one player attacker
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = unsettle_tribe_faction_war_victory_desc_local_player_attacker_alone
			}
			triggered_desc = { # Desc for only one attacker, player defender
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = player_unsettle_tribe_faction_war_victory_desc_local_player_defender_attacker_alone
			}
			desc = unsettle_tribe_faction_war_victory_desc_local_player_attacker_alone # Desc for a third party involved
		}

	}

	on_victory = {

		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
		}
		scope:attacker.joined_faction = {
			every_faction_member = {
				change_liege_or_become_independent = {
					CHANGE = scope:change
					VASSAL = this
				}
				change_government = nomadic_government

				hidden_effect = {
					set_variable = {
						name = independence_war_former_liege
						value = scope:defender
					}
					add_truce_both_ways = {
						character = scope:defender
						days = 1825
						war = root.war
						result = victory
					}
				}
			}
		}
		scope:attacker = {
			add_prestige = medium_prestige_value
		}
		scope:defender = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1
			}

			every_vassal = {
				limit = { is_ai = no }
				send_interface_toast = {
					type = event_generic_neutral
   					title = liege_primary_title_dissolution
   					desc = liege_primary_title_dissolution_desc
   					left_icon = scope:defender
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:defender = {
			every_held_title = {
				limit = {
					tier = prev.primary_title.tier
				}
				add_to_temporary_list = titles_to_destroy
			}
		}

		every_in_list = {
			list = titles_to_destroy
			scope:attacker = {
				destroy_title = prev
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_nation_fracturing_faction_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_nation_fracturing_faction_war_white_peace_attacker_desc
			}
			desc = player_nation_fracturing_faction_war_white_peace_desc
		}

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}

			add_character_flag = {
				flag = recent_nation_fracturing_faction_war
				years = faction_nation_fracturing_war_white_peace_cooldown
			}
			add_prestige = minor_prestige_value
		}

		on_white_peace_faction_revolt_war = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = nation_fracturing_faction_war_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_nation_fracturing_defeat_attacker_desc
			}
			desc = player_nation_fracturing_faction_war_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_character_flag = {
				flag = recent_nation_fracturing_faction_war
				years = faction_nation_fracturing_war_defeat_cooldown
			}
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
		}

		on_lost_faction_revolt_war = yes
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "NATION_FRACTURING_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	max_ai_diplo_distance_to_title = 500
}
