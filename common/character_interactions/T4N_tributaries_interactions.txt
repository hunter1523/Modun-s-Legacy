#Tributaries Character Interactions

declare_war_interaction = {
    category = interaction_category_diplomacy
    common_interaction = yes
    special_interaction = declare_war_interaction
    interface = declare_war
    interface_priority = 70
    popup_on_receive = yes
    pause_on_receive = no # this is handled by the interface instead

    desc = declare_war_desc

    is_shown = {
        NOT = {
            scope:recipient = scope:actor
        }
        scope:recipient = {
            is_landed = yes
        }
        scope:actor = {
            NOT = {
                is_at_war_with = scope:recipient
            }
        }
    }

    is_valid_showing_failures_only = {
        scope:actor = {
            NOT = { has_trait = incapable }
            can_attack_in_hierarchy = scope:recipient
            NOT = {
                has_raised_armies = yes
            }
            has_any_display_cb_on = scope:recipient
            NOT = {
                is_allied_in_war = scope:recipient
            }
            custom_description = {
                text = "is_not_bankrupt"
                gold > 0
            }
            NOT = {
                custom_description = {
                    text = "is_in_an_activity"
                    exists = involved_activity
                }
            }
            trigger_if = {
                limit = {
                    culture = { has_cultural_parameter = cannot_attack_allies }
                }
                NOT = {
                    is_allied_to = scope:recipient
                }
            }
            trigger_if = {
                limit = {
                    culture = { has_cultural_parameter = cannot_attack_truces }
                }
                NOT = {
                    has_truce = scope:recipient
                }
            }
            is_imprisoned = no
            trigger_if = {
                limit = {
                    has_variable_list = subjugation_offer_under_consideration
                }
                custom_description = {
                    text = is_not_considering_offer_of_subjugation
                    NOT = {
                        is_target_in_variable_list = {
                            name = subjugation_offer_under_consideration
                            target = scope:recipient
                        }
                    }
                }
            }
        }
        scope:recipient = { NOT = { has_strong_hook = scope:actor } }
        scope:recipient = {
            trigger_if = {
                limit = { is_imprisoned = yes }
                NOT = {
                    imprisoner = scope:actor
                }
            }
        }
        trigger_if = {
            limit = {
                scope:actor = {
                    has_variable = my_suzerain
                }
            }
            custom_tooltip = {
                text = declare_war_target_is_suzerain
                scope:actor = {
                    NOT = {
                        var:my_suzerain = {
                            this = scope:recipient
                        }
                    }
                }
            }
        }
    }

    has_valid_target_showing_failures_only = {
        custom_description = {
            text = "declare_war_hook_on_liege"
            OR = {
                war_declarer_needs_hook_on_liege = no
                always = scope:hook
            }
        }
        scope:actor = {
            NOR = {
                is_at_war_with = scope:recipient
                custom_description = { #A vassal cannot go to war against someone their Liege is already at war with
                    text = liege_is_at_war_with_recipient
                    object = scope:recipient
                    liege = {
                        is_at_war_with = scope:recipient
                    }
                }
            }
        }
    }

    send_options_exclusive = no
    send_option = {
        is_shown = {
            war_declarer_needs_hook_on_liege = yes
        }
        is_valid = {
            scope:actor = {
                has_usable_hook = liege
            }
        }
        flag = hook
        localization = WAR_LIEGE_HOOK
        can_invalidate_interaction = yes
    }
    should_use_extra_icon = {
        war_declarer_needs_hook_on_liege = yes
        scope:actor = { has_usable_hook = liege }
    }
    extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

    on_accept = {

        scope:actor = {
            #Feedback!
            hidden_effect = {
                send_interface_toast = {
                    title = declare_war_interaction_notification

                    left_icon = scope:actor
                    right_icon = scope:recipient

                    custom_tooltip = declare_war_interaction_notification_tooltip

                    show_as_tooltip = {
                        if = {
                            limit = { always = scope:hook }
                            use_hook = liege
                        }
                    }
                }
            }

            #Has the instigator promised a vassal a war (vassal.2601)?
            if = {
                limit = {
                    exists = var:promised_war
                    var:promised_war = {
                        is_alive = yes
                        NOT = { this = scope:recipient }
                    }
                }
                trigger_event = {
                    id = vassal.2610
                    days = { 7 10 }
                }
            }

            if = {
                limit = { always = scope:hook }
                use_hook = liege
            }

            #Send break up event if they are your lover
            if = {
                limit = {
                    has_relation_lover = scope:recipient
                    NOT = { has_relation_rival = scope:recipient } #To enable really strange love stories
                    any_character_war = {
                        casus_belli = {
                            primary_attacker = scope:actor
                            primary_defender = scope:recipient
                            any_target_title = { count >= 1 }
                        }
                    }
                }
                scope:recipient = {
                    trigger_event = {
                        id = lover.0103
                        days = { 14 30 }
                    }
                }
            }

            #Invalidate any wars your vassals have going against recipient atm
            scope:recipient = {
                if = {
                    limit = {
                        any_character_war = {
                            primary_attacker = {
                                is_vassal_or_below_of = scope:actor
                                trigger_if = { #Ai should never invalidate a player's war!
                                    limit = {
                                        this = { is_ai = no }
                                    }
                                    scope:actor = {
                                        is_ai = no
                                    }
                                }
                            }
                        }
                    }
                    every_character_war = {
                        limit = {
                            primary_attacker = {
                                is_vassal_or_below_of = scope:actor
                                trigger_if = { #Ai should never invalidate a player's war!
                                    limit = {
                                        this = { is_ai = no }
                                    }
                                    scope:actor = {
                                        is_ai = no
                                    }
                                }
                            }
                        }
                        show_as_tooltip = { end_war = invalidated } #Actually ended in the event
                        primary_attacker = { trigger_event = war_event.1001 }
                    }
                }
            }
            #Notify defender's vassals if the war is targeting one or more of their titles
            scope:recipient = {
                if = {
                    limit = {
                        any_vassal = {
                            save_temporary_scope_as = attacked_vassal
                            any_character_war = {
                                casus_belli = {
                                    primary_attacker = scope:actor
                                    primary_defender = scope:recipient
                                    any_target_title = {
                                        holder = {
                                            OR = {
                                                this = scope:attacked_vassal
                                                is_vassal_or_below_of = scope:attacked_vassal
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    every_vassal = {
                        save_temporary_scope_as = attacked_vassal
                        limit = {
                            any_character_war = {
                                casus_belli = {
                                    primary_attacker = scope:actor
                                    primary_defender = scope:recipient
                                    any_target_title = {
                                        holder = {
                                            OR = {
                                                this = scope:attacked_vassal
                                                is_vassal_or_below_of = scope:attacked_vassal
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        send_interface_toast = {
                            title = declare_war_interaction_notification

                            left_icon = scope:actor
                            right_icon = scope:recipient

                            custom_tooltip = declare_war_interaction_notification_tooltip
                        }
                    }
                }
            }
        }
    }

    auto_accept = yes
}

call_suzerain_to_war = {
    category = interaction_category_diplomacy
    use_diplomatic_range = no
    desc = call_suzerain_to_war_desc
    interface_priority = 60
    interface = call_ally
    special_interaction = call_ally_interaction
    popup_on_receive = yes
    pause_on_receive = yes

    greeting = positive
    notification_text = call_suzerain_notification

    is_shown = {
        scope:actor = { #put here every tributary type which should be able to call suzerain
            is_at_war = yes
            has_variable = my_suzerain
            var:my_suzerain = {
                this = scope:recipient
            }
            NOT = { is_at_war_with = scope:recipient }
        }
    }

    has_valid_target = {
        exists = scope:target
    }

    is_valid_showing_failures_only = {
        #all hail jank, this is a only way i think i can achive that xD
        NOT = {
            scope:actor = {
                has_variable = my_suzerain
                any_war_ally = {
                    this = var:my_suzerain
                }
                var:my_suzerain = {
                    is_target_in_variable_list = { name = permanent_tributaries target = prev }
                }
            }
        }
    }

    on_decline = {
        #The war could theoretically end on the day the decline is sent
        if = {
            limit = {
                exists = scope:target
            }
            scope:target = {
                if = {
                    limit = {
                        is_defender = scope:actor
                    }
                    scope:actor = {
                        add_opinion = {
                            modifier = rejected_call_to_defensive_war
                            target = scope:recipient
                        }
                        # This needs to go into a function (effect)
                        scope:actor = {
                            remove_variable = my_suzerain

                            scope:recipient = {
                                remove_list_variable = { name = permanent_tributaries target = prev }
                            }
                            scope:recipient = {
                                remove_list_variable = { name = all_tributaries target = prev }
                            }
                        }
                    }
                    scope:recipient = {
                        add_prestige_experience = massive_prestige_loss
                        trigger_event = { id = tributaries.4 }
                    }
                }
                hidden_effect = {
                    if = {
                        limit = {
                            NOT = { was_called = scope:recipient }
                        }
                        set_called_to = scope:recipient
                    }
                }
            }
        }
    }

    on_accept = {
        scope:target = {
            hidden_effect = {
                set_called_to = scope:recipient
            }
            if = {
                limit = {
                    is_attacker = scope:actor
                }
                add_attacker = scope:recipient
            }
            else = {
                add_defender = scope:recipient
            }
        }
    }

    ai_accept = {
        base = 20

        modifier = {  # Refuse call against Heir
            add = -1000
            exists = scope:recipient.player_heir
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
            }
            trigger_else = {
                scope:target.casus_belli.primary_defender = scope:recipient.player_heir
            }
            desc = WONT_FIGHT_HEIR_REASON
        }

        modifier = {  # Refuse call against Spouse
            add = -1000
            scope:recipient = {
                trigger_if = {
                    limit = { scope:target.casus_belli.primary_defender = scope:actor }
                    any_spouse = {
                        this = scope:target.casus_belli.primary_attacker
                    }
                }
                trigger_else = {
                    any_spouse = {
                        this = scope:target.casus_belli.primary_defender
                    }
                }

            }
            desc = WONT_FIGHT_SPOUSE_REASON
        }

        opinion_modifier = { # Opinion Factor
            who = scope:recipient
            opinion_target = scope:actor
            multiplier = 1.0
            desc = AI_OPINION_REASON
        }

        # Honor factor
        ai_value_modifier = {
            ai_honor = 1
            min = 0
        }

        modifier = {  # Tends to join defensive wars
            add = 50
            scope:target.casus_belli.primary_defender = scope:actor
            desc = DEFENSIVE_WAR_REASON
        }

        compare_modifier = { # Likes fighting infidels
            trigger = {
                scope:recipient.faith = scope:actor.faith
                OR = {
                    AND = {
                        scope:target.casus_belli.primary_attacker = {
                            this = scope:actor
                            faith = {
                                faith_hostility_level = {
                                    target = scope:target.casus_belli.primary_defender.faith
                                    value >= religious_cb_enabled_hostility_level
                                }
                            }
                        }
                    }
                    AND = {
                        scope:target.casus_belli.primary_defender = {
                            this = scope:actor
                            faith = {
                                faith_hostility_level = {
                                    target = scope:target.casus_belli.primary_defender.faith
                                    value >= religious_cb_enabled_hostility_level
                                }
                            }
                        }
                    }
                }
            }
            target = scope:recipient
            value = ai_zeal
            desc = "ZEAL_AGAINST_INFIDELS"
            min = 0
            multiplier = 0.5
        }

        modifier = {  # Reluctant to attack another ally
            add = -50
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:recipient = {
                is_allied_to = scope:target.casus_belli.primary_defender
            }
            desc = ATTACK_ON_ALLY_REASON
        }

        modifier = {  # Reluctant to defend against another ally
            add = -25
            scope:target.casus_belli.primary_defender = scope:actor
            scope:recipient = {
                is_allied_to = scope:target.casus_belli.primary_attacker
            }
            desc = WAR_WITH_ALLY_REASON
        }

        modifier = {  # Reluctant to join wars against religious brethren.
            add = -50
            NOT = { scope:recipient.faith = scope:actor.faith }
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
            scope:target.casus_belli.war = {
                OR = {
                    using_cb = minor_religious_war
                    using_cb = religious_war
                    using_cb = major_religious_war
                    using_cb = undirected_great_holy_war
                    using_cb = directed_great_holy_war
                }
            }
            desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
        }
    }

    # Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
    ai_will_do = {
        base = 100

        modifier = { # If the player is at war, do not bother them with offensive calls
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:recipient = {
                is_ai = no
                any_character_war = {
                    primary_defender = scope:recipient
                }
            }
            factor = 0
        }

        modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
            exists = scope:recipient.player_heir
            scope:recipient = {
                is_ai = no
            }
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
            }
            trigger_else = {
                scope:target.casus_belli.primary_defender = scope:recipient.player_heir
            }
            factor = 0
        }

        modifier = { # Same with spouses
            scope:recipient = {
                is_ai = no
            }
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                any_spouse = {
                    this = scope:target.casus_belli.primary_attacker
                }
            }
            trigger_else = {
                any_spouse = {
                    this = scope:target.casus_belli.primary_defender
                }
            }
            factor = 0
        }

        modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
            has_variable = delay_calling_recent_ally
            var:delay_calling_recent_ally = scope:recipient
            scope:target = {
                war_days >= 30
            }
            factor = 0

        }
    }
}

# Demand tribute from recipient
ruler_offer_tribute_to_recipient = {
    category = interaction_category_diplomacy
    common_interaction = yes
    use_diplomatic_range = yes
    desc = demand_tribute_interaction_desc
    notification_text = demand_tribute_interaction_notification

    popup_on_receive = yes
    pause_on_receive = yes

    can_send_despite_rejection = yes
    ai_min_reply_days = 4
    ai_max_reply_days = 9

    is_shown = {
        scope:actor = {
            NOT = { this = scope:recipient }
            OR = {
                has_government = mandala_government
                has_government = nomadic_government
                has_government = clan_government
                has_government = chinese_government
            }
        }
        scope:recipient = { # recipient is tributary
            NOT = { is_tributary = yes }
            NOT = { is_allied_to = scope:actor }
            is_independent_ruler = yes
            highest_held_title_tier >= tier_county
            highest_held_title_tier <= scope:actor.highest_held_title_tier
        }
    }

    is_valid_showing_failures_only = {
        scope:actor = {
            is_imprisoned = no
            is_at_war = no
            NOT = { has_truce = scope:recipient }
        }
        scope:recipient = {
            is_imprisoned = no
            is_at_war = no

            custom_description = {
                text = has_already_rejected_tribute
                subject = scope:recipient
                NOR = {
                    has_opinion_modifier = {
                        modifier = refused_to_give_tribute_opinion
                        target = scope:actor
                    }
                }
            }
        }
    }

    on_accept = {
        scope:recipient = {
            if = {
                limit = {
                    scope:permanent_trib = yes
                }
                custom_tooltip = permanent_trib_recipient_tooltip
                make_tributary = {
                    TYPE = tributary_permanent
                    SUZERAIN = scope:actor
                    TRIBUTARY = scope:recipient
                }
                scope:actor = {
                    custom_tooltip = permanent_trib_tooltip
                }
                save_scope_as = trib
                scope:actor = {
                    trigger_event = { id = tributaries.9 }
                }
            }

            if = {
                limit = {
                    scope:one_time_trib = yes
                }
                add_opinion = {
                    modifier = accepted_to_give_tribute_opinion
                    target = scope:actor
                }
                scope:recipient = {
                    pay_short_term_gold = {
                        gold = 2
                        target = scope:actor
                        yearly_income = yes
                    }
                }
                save_scope_as = trib
                scope:actor = {
                    trigger_event = { id = tributaries.10 }
                }
            }
        }
        scope:actor = {
            add_truce_both_ways = {
                character = scope:recipient
                days = 1825
                name = truce_paid_tribute
            }
        }
    }

    on_decline = {
        scope:recipient = {
            save_scope_as = not_trib
            add_opinion = {
                modifier = refused_to_give_tribute_opinion
                target = scope:actor
            }
        }
        scope:actor = {
            add_opinion = {
                modifier = refused_to_give_tribute_opinion
                target = scope:recipient
            }

            if = {
                limit = {
                    scope:one_time_trib = yes
                }
                trigger_event = { id = tributaries.101 }
            }
            else = {
                trigger_event = { id = tributaries.11 }
            }
        }
    }

    ai_accept = { # Based on Offer Vassalization
        base = -20

        modifier = {
            add = -20
            desc = ruler_offer_tribute_to_recipient_interaction_permanent_tributary_tt
            trigger = {
                scope:permanent_trib = yes
            }
        }

        #MAIN
        #Heretic/Infidel modifier.
        #Tier difference modifier.
        #Dejure modifier.
        #Distant/Remote Realm modifier.
        #Military power difference modifier.

        #MINOR
        #Rivalry modifier.
        #Same Dynasty modifier.
        #Cultural/Cultural Group modifiers.
        #Ageism modifier vs kids.
        #Ruler Legitimacy modifier.
        #Claimant modifier.

        #OPINION SCALES
        #Dread
        #Compare Opinion modifier.

        # MAIN
        modifier = { #I am a King!
            desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
            trigger = {
                scope:recipient = { highest_held_title_tier = tier_kingdom }
            }
            add = -25
        }
        modifier = { #We just fought against each other.
            desc = offer_vassalization_interaction_aibehavior_recent_war_tt
            trigger = {
                scope:recipient = {
                    any_truce_holder = {
                        this = scope:actor
                    }
                }
            }
            add = -40
        }
        modifier = { #I fought an independence war against you.
            desc = offer_vassalization_interaction_aibehavior_independence_war_tt
            trigger = {
                scope:recipient = {
                    exists = var:independence_war_former_liege
                    var:independence_war_former_liege = scope:actor
                }
            }
            add = -100
        }
        modifier = { #Wide difference in rank
            desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
            trigger = {
                scope:actor = {
                    tier_difference = {
                        target = scope:recipient
                        value > 1
                    }
                }
            }
            add = 5
        }
        modifier = { #Distant Realm.
            desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
            trigger = {
                scope:actor = {
                    character_is_realm_neighbor = scope:recipient
                    NOT = {
                        character_is_land_realm_neighbor = scope:recipient
                    }
                }
            }
            add = -10
        }
        modifier = { #Remote Realm.
            desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
            trigger = {
                scope:actor = {
                    NOT = {
                        character_is_realm_neighbor = scope:recipient
                    }
                }
                scope:recipient.capital_province = { squared_distance = { target = scope:actor.capital_province value >= 200000 } }
            }
            add = -50
        }
        modifier = {
            desc = offer_vassalization_interaction_aibehavior_power_tt
            add = {
                value = 1
                    subtract = {
                    value = scope:recipient.max_military_strength
                    divide = { value = scope:actor.max_military_strength min = 1 }
                }
                multiply = 20
            }
        }

        # MINOR
        modifier = { #Friend modifier.
            desc = offer_vassalization_interaction_aibehavior_friend_tt
            trigger = {
                scope:recipient = {
                    has_relation_friend = scope:actor
                    NOT = { has_relation_best_friend = scope:actor }
                }
            }
            add = 10
        }
        modifier = { #Best Friend modifier.
            desc = offer_vassalization_interaction_aibehavior_best_friend_tt
            trigger = {
                scope:recipient = {
                    has_relation_best_friend = scope:actor
                }
            }
            add = 20
        }
        modifier = { #Rivalry modifier.
            desc = offer_vassalization_interaction_aibehavior_rival_tt
            trigger = {
                scope:recipient = {
                    has_relation_rival = scope:actor
                    NOT = { has_relation_nemesis = scope:actor }
                }
            }
            add = -10
        }
        modifier = { #Nemesis modifier.
            desc = offer_vassalization_interaction_aibehavior_nemesis_tt
            trigger = {
                scope:recipient = {
                    has_relation_nemesis = scope:actor
                }
            }
            add = -1000
        }
        modifier = { #Same Dynasty modifier.
            desc = offer_vassalization_interaction_aibehavior_dynasty_tt
            trigger = {
                scope:recipient = {
                    dynasty = scope:actor.dynasty
                }
            }
            add = 5
        }
        modifier = { #Ageism modifier vs kids.
            desc = offer_vassalization_interaction_aibehavior_child_tt
            trigger = {
                scope:actor = {
                    age < 12
                }
                scope:recipient = {
                    age > 16
                }
            }
            add = -5
        }

        # OPINION INFLUENCE
        modifier = {
            add = intimidated_external_reason_value
            scope:recipient = {
                has_dread_level_towards = {
                    target = scope:actor
                    level = 1
                }
            }
            desc = INTIMIDATED_REASON
        }
        modifier = {
            add = cowed_external_reason_value
            scope:recipient = {
                has_dread_level_towards = {
                    target = scope:actor
                    level = 2
                }
            }
            desc = COWED_REASON
        }
        opinion_modifier = { #Compare Opinion modifier.
            who = scope:recipient
            opinion_target = scope:actor
            multiplier = 0.35
        }
    }

    send_options_exclusive = yes
    send_option = {
        flag = one_time_trib
        localization = one_time_trib
        starts_enabled = { always = yes }
    }
    send_option = {
        flag = permanent_trib
        localization = permanent_trib
    }

    ai_potential = {
        is_adult = yes
        highest_held_title_tier >= tier_county
        is_at_war = no
    }

    ai_targets = {
        ai_recipients = neighboring_rulers
    }

    ai_frequency = 60

    ai_will_do = {
        base = 100

        modifier = {
            add = 2
            scope:one_time_trib = yes
        }
        modifier = {
            add = 3
            scope:permanent_trib = yes
        }

        modifier = { # Less likely to target someone they can just invade
            add = -50
            has_any_cb_on = scope:recipient
        }

        modifier = { # Will not target a more powerful realm
            scope:actor.max_military_strength < {
                value = scope:recipient.max_military_strength
                multiply = 2
            }
            add = -1000
        }
    }
}

free_tributary_interaction = {
    category = interaction_category_diplomacy
    use_diplomatic_range = yes

    desc = free_tributary_interaction_desc

    is_shown = {
        scope:actor = {
            NOT = {
                has_variable = my_suzerain
            }
            NOT = { this = scope:recipient }
        }
        scope:recipient = {
            has_variable = my_suzerain
            var:my_suzerain = {
                this = scope:actor
            }
        }
    }

    is_valid_showing_failures_only = {
        scope:actor = {
            is_at_war = no
        }
    }

    auto_accept = {
        always = yes
    }

    on_accept = {
        scope:recipient = {
            free_tributary_effect = yes
            add_truce_both_ways = {
                character = scope:actor
                days = 365
                name = TRUCE_BROKEN_TRIBUTARY
            }
        }
    }

    ai_will_do = {
        base = 0
    }
}

# Do this
# Use a strong hook
# OR replace with trib contract interface
# annex_tributary = {
#     category = interaction_category_diplomacy
#     use_diplomatic_range = no
#
#     desc = annex_tributary_interaction_desc
#
#     is_shown = {
#         scope:actor = {
#             is_target_in_variable_list = { name = permanent_tributaries target = scope:recipient }
#             NOT = {
#                 this = scope:recipient
#             }
#         }
#         exists = scope:recipient.var:possible_vasalisation_year
#     }
#
#     is_valid_showing_failures_only = {
#         scope:actor.primary_title.tier > scope:recipient.primary_title.tier
#     }
#
#     on_accept = {
#         scope:recipient = {
#             custom_description = {
#                 text = annex_tributary_desc
#                 subject = scope:recipient
#                 create_title_and_vassal_change = {
#                     type = independency
#                     save_scope_as = change
#                 }
#                 change_liege = { liege = scope:actor change = scope:change }
#                 resolve_title_and_vassal_change = scope:change
#                 remove_variable = my_suzerain
#                 scope:actor = {
#                     remove_list_variable = { name = permanent_tributaries target = prev }
#                 }
#             }
#         }
#     }
#
#     ai_accept = {
#         base = -10
#
#         modifier = {
#             add = -100
#             scope:recipient.var:possible_vasalisation_year <= current_year
#             desc = trib_annexation_too_early
#         }
#     }
#
#     ai_will_do = {
#         base = 10
#     }
# }

#release vassal as tributary / copy of 'grant independence'
#needs some tweaking on conditions maybe
independent_tributary_interaction = {
    category = interaction_category_vassal
    force_notification = yes
    greeting = positive
    notification_text = independent_tributary_interaction_notification

    desc =  independent_tributary_interaction_desc

    is_shown = {
        scope:recipient = {
            is_vassal_of = scope:actor
        }
        NOT = { scope:recipient = scope:actor }
    }

    is_valid_showing_failures_only = {
        NOT = { scope:actor = { is_at_war_with = scope:recipient } }
        scope:actor = {
            is_independent_ruler = yes
            NOT = {
                is_at_war = yes
            }
        }
        custom_description = {
            text = is_at_war_with_another_vassal
            object = scope:recipient
            NOT = {
                scope:actor = {
                    any_vassal_or_below = {
                        is_at_war_with = scope:recipient
                    }
                }
            }
        }
        custom_description = {
            text = is_de_jure_vassal_check
            object = scope:recipient
            NOT = { #Can not be used against de jure vassals
                scope:recipient.primary_title = {
                    any_this_title_or_de_jure_above = {
                        holder = scope:actor
                    }
                }
            }
        }
    }

    auto_accept = yes

    on_accept = {
        scope:actor = {
            stress_impact = {
                ambitious = medium_stress_impact_gain
                arrogant = minor_stress_impact_gain
                greedy = minor_stress_impact_gain
            }
            hidden_effect = {
                send_interface_toast = {
                    title = independent_tributary_interaction_toast
                    left_icon = scope:actor
                    right_icon = scope:recipient

                    custom_tooltip = independent_tributary_interaction_toast_desc
                }
            }
        }

        scope:recipient = {
            #Send notifications
            if = {
                limit = {
                    any_liege_or_above = {
                        is_ai = no
                        NOT = { this = scope:actor }
                    }
                }
                every_liege_or_above = {
                    limit = {
                        is_ai = no
                        NOT = { this = scope:actor }
                    }
                    trigger_event = vassal_interaction.0023
                }
            }
            if = {
                limit = {
                    any_liege_or_above = {
                        any_vassal = {
                            is_ai = no
                            NOR = {
                                this = scope:recipient
                                this = scope:actor
                            }
                        }
                    }
                }
                every_liege_or_above = {
                    limit = {
                        any_vassal = {
                            is_ai = no
                            NOR = {
                                this = scope:recipient
                                this = scope:actor
                            }
                        }
                    }
                    every_vassal = {
                        limit = {
                            is_ai = no
                            NOT = { this = scope:recipient }
                        }
                        trigger_event = {
                            id = vassal_interaction.0022
                            days = 3
                        }
                    }
                }
            }

            add_opinion = {
                target = scope:actor
                modifier = granted_independence_opinion
            }

            add_truce_both_ways = {
                character = scope:actor
                days = 3650
                name = truce_independent_tributary
            }

            create_title_and_vassal_change = {
                type = independency
                save_scope_as = change
                add_claim_on_loss = yes
            }
            becomes_independent = {
                change = scope:change
            }

            #makes them as a permanent_tributary
            make_tributary = {
                TYPE = tributary_permanent
                SUZERAIN = scope:actor
                TRIBUTARY = scope:recipient
            }

            resolve_title_and_vassal_change = scope:change
        }
    }

    ai_will_do = {
        base = 0 #The AI should never do this!
    }
}
